// TEST build
// uses https://github.com/openshift/jenkins-client-plugin

node('master') {    

    stage('Build') {
		openshift.withCluster() {
			openshift.withProject() {
				parallel('Angular': {		
					def bc1 = openshift.selector('bc', 'cllc-public-angular-test')
					def buildSelector1 = bc1.startBuild("--commit=master")
					sleep(5)
					buildSelector1.logs('-f')
					sleep(30)
					def bc2 = openshift.selector('bc', 'cllc-public-frontend-test')
					def buildSelector2 = bc2.startBuild()
					
					timeout(10) { 
						buildSelector2.logs('-f')
					}
					
					
				}, 'C# API': {
											
					def bc = openshift.selector('bc', 'cllc-public-api-test')
					def buildSelector = bc.startBuild("--commit=master")
					sleep(5) 
					buildSelector.logs('-f')						   
				})
					
			}
		}     
    }    
	stage('Tag') {
		openshift.withCluster() {
			openshift.withProject() {
						
				openshift.tag("cllc-public-api-test:latest", "cllc-public-api:test")
				openshift.tag("cllc-public-frontend-test:latest", "cllc-public-frontend:test") 		
			}
		}     
    }  
}

podTemplate(label: 'jenkins-agent-dotnet', name: 'jenkins-agent-dotnet', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
    containerTemplate(
        name: 'jnlp', 
        activeDeadlineSeconds: 5400,
        image: "${env.image_registry}/agent-dotnet:latest",
        resourceRequestCpu: '250m',
        resourceLimitCpu: '1',
        resourceRequestMemory: '2Gi',
        resourceLimitMemory: '3Gi',
        workingDir: '/home/jenkins',
        command: '',
		alwaysPullImage: true,
        args: '${computer.jnlpmac} ${computer.name}'
    )
]) {
    stage('Release BDD Test') {
	parallel('Release 1': {	
        node('jenkins-agent-dotnet') {
            //the checkout is mandatory
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm

            dir('functional-tests/bdd-tests') {               
                withEnv(["TZ=GMT-7,baseUri=${baseUri}","test_start=${test_start}","test_start_worker=${test_start_worker}","test_cc=${test_cc}","test_ccv=${test_ccv}","CHROME_BINARY_LOCATION=${CHROME_BINARY_LOCATION}"])
                {
                    try {                        
                        sh 'dotnet test --filter Category=${test_category1} --logger "junit;LogFilePath=functionalResults1.xml"'					
                    }
                    catch (err)
                    {
                        echo "Error encountered:"
                        echo err.getMessage()
                    }
                    finally {
                        junit 'functionalResults1.xml'
                    }					
                }            
            }
        }
    },'Release 2': {	
        node('jenkins-agent-dotnet') {
            //the checkout is mandatory
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm

            dir('functional-tests/bdd-tests') {               
                withEnv(["TZ=GMT-7,baseUri=${baseUri}","test_start=${test_start}","test_start_worker=${test_start_worker}","test_cc=${test_cc}","test_ccv=${test_ccv}","CHROME_BINARY_LOCATION=${CHROME_BINARY_LOCATION}"])
                {
                    try {                        
                        sh 'dotnet test --filter Category=${test_category2} --logger "junit;LogFilePath=functionalResults2.xml"'					
                    }
                    catch (err)
                    {
                        echo "Error encountered:"
                        echo err.getMessage()
                    }
                    finally {
                        junit 'functionalResults2.xml'
                    }					
                }            
            }
        }
	},'Release 3': {	
        node('jenkins-agent-dotnet') {
            //the checkout is mandatory
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm

            dir('functional-tests/bdd-tests') {               
                withEnv(["TZ=GMT-7,baseUri=${baseUri}","test_start=${test_start}","test_start_worker=${test_start_worker}","test_cc=${test_cc}","test_ccv=${test_ccv}","CHROME_BINARY_LOCATION=${CHROME_BINARY_LOCATION}"])
                {
                    try {                        
                        sh 'dotnet test --filter Category=${test_category3} --logger "junit;LogFilePath=functionalResults3.xml"'					
                    }
                    catch (err)
                    {
                        echo "Error encountered:"
                        echo err.getMessage()
                    }
                    finally {
                        junit 'functionalResults3.xml'
                    }					
                }            
            }
        }
    },'Release 4': {	
        node('jenkins-agent-dotnet') {
            //the checkout is mandatory
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm

            dir('functional-tests/bdd-tests') {               
                withEnv(["TZ=GMT-7,baseUri=${baseUri}","test_start=${test_start}","test_start_worker=${test_start_worker}","test_cc=${test_cc}","test_ccv=${test_ccv}","CHROME_BINARY_LOCATION=${CHROME_BINARY_LOCATION}"])
                {
                    try {                        
                        sh 'dotnet test --filter Category=${test_category4} --logger "junit;LogFilePath=functionalResults4.xml"'					
                    }
                    catch (err)
                    {
                        echo "Error encountered:"
                        echo err.getMessage()
                    }
                    finally {
                        junit 'functionalResults4.xml'
                    }					
                }            
            }
        }
    })
}
	
}





